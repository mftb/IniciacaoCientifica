#!/usr/bin/env python
# -*- coding: latin1 -*-

# MAJOR TODO: PROPERLY TEST

# eslbench frontend script by Matheus Boy - Unicamp - Campinas State University

import os, sys

# === AUXILIARY FUNCTIONS ===

# cleans up the dir structure and removes the rundir
# in order to commit to version control
def clean():
    right_files = []
    for root, dirs, files in os.walk(os.getcwd()):
        if '.svn' in dirs:
            dirs.remove('.svn')
        for f in files:
            if f[-1] == '~':
                os.remove(os.path.join(root, f))
            elif f[-2] == '.' and (f[-1] == 'x' or f[-1] == 'o'):
                os.remove(os.path.join(root, f))
    os.system("rm -rf rundir/")
    
# general Makefile creator
def makefile(proc, nproc, sw, power):
    make = "#FILE GENERATED AUTOMAGICALLY - DO NOT EDIT\nexport PROCESSOR := " \
           + proc + "\nexport NUMPROCESSORS := " + nproc + \
           "\nexport SOFTWARE := " + sw + "\nexport CROSS := " + proc + \
           "-elf-gcc\nexport PLATFORM := $(PROCESSOR).plat\n"
    if power:
        make = make + "export POWER_SIM_FLAG := -DPOWER_SIM\n"
    else:
        make = make + "export POWER_SIM_FLAG := \n"
    make = make + "include Makefile.conf\ninclude Makefile.rules\n"
    return make

# prints usage
def help():
    print "Usage: ./eslbench [-b|--build] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software>"
    print "       ./eslbench [-r|--run] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software>"
    print ""
    print "       ./eslbench [-b|--build] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-pw|--power]"
    print "       ./eslbench [-r|--run] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-pw|--power]"
    print "       ./eslbench [-b|--build] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-c|--condor]=<queue>"
    print "       ./eslbench [-r|--run] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-c|--condor]=<queue>"
    print "       ./eslbench [-b|--build] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-pw|--power] [-c|--condor]=<queue>"
    print "       ./eslbench [-r|--run] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-pw|--power] [-c|--condor]=<queue>"
    print "       ./eslbench [-r|--run] [-p|--processor]=<processor> [-n|--numcores]=<number_of_cores> [-s|--sofware]=<software> [-nb|--nobuild]"
    print ""
    print "       ./eslbench [-l|--clean]"
    print "       ./eslbench [-h|--help]"

# rundir Makefile creator
def run_make(path, proc, nproc, sw):
    make = "run:\n\t./" + proc + "." + nproc + ".x --load=" + sw + "." + proc + ".x " + nproc +"\n"
    f = open(path + "/Makefile", "w")
    f.write(make)
    f.close()

# condor submission file creator
# build only, never run
def condor_task(path, proc, nproc, sw, queue):
    task = "Universe = vanilla\nLog = eslbench.log\nOutput = eslbench.out\n"\
    "Error = eslbench.err\nshould_transfer_files = No\n"\
    "Executable = " + proc + "." + nproc + ".x\nArguments = --load=" + sw + "." + proc + ".x"\
    "\nQueue " + str(queue) + "\n"
    f = open(path + "/condor_task", "w")
    f.write(task)
    f.close()

# rundir creation
def build(tracker, power, condor):
    path = ""
    try:
        # walks the platform tracker make tree
        for i in tracker[0]:
            for j in tracker[1]:
                for k in tracker[2]:
                    os.system("rm Makefile")
                    # creates general Makefile
                    f = open("Makefile", "w")
                    if i == 'arm' or i == 'powerpc' and power:
                        print "WARNING! The selected processor does not support PowerSC!"
                        f.write(makefile(i, j, k, False))
                    else:
                        f.write(makefile(i, j, k, power))
                    f.close()
                    # makes the platform
                    os.system("make clean all")
                    path = "rundir/" + i + "." + j + "." + k
                    print "Creating rundir for " + path[7:] + "..."
                    # creates rundir for each platform
                    os.system("mkdir -p " + path)
                    # copies it to its rundir                    
                    os.system("make copy")
                    # creates rundir makefile with run rule:
                    #./$(PROCESSOR).$(NUMPROCESSORS).x \
                    #--load=$(SOFTWARE).$(PROCESSOR).x $(NUMPROCESSORS)
                    run_make(path, i, j, k)
                    # creates condor task file in the rundir
                    condor_task(path, i, j, k, 1)
    except:
        print "Error! Exiting..."
        sys.exit(1)

# platform run
def run(tracker, nobuild, power, condor):
    try:
        # walks the platform tracker make tree
        for i in tracker[0]:
            for j in tracker[1]:
                for k in tracker[2]:
                    rundir_path = "rundir/" + i + "." + j + "." + k + "/"
                    # tests if rundir exists
                    if not os.path.isdir(rundir_path):
                        # prints warning
                        print "WARNING! " + rundir_path + " doesn't exists!"
                        if not nobuild:
                            # creates rundir
                            build([[i],[j],[k]], power, condor)
                            os.chdir(rundir_path)
                            os.system("make run")
                            os.chdir("../../")
                    else:
                        os.chdir(rundir_path)
                        os.system("make run")
                        os.chdir("../../")
    except:
        print "Error! Exiting..."
        sys.exit(1)



# === DEFINES ===
# “Smart data structures and dumb code works a lot better than the other
# way around.”
# —Eric Raymond, The Cathedral and the Bazaar, chapter 5

procs = ['arm', 'mips', 'powerpc', 'sparc']
nprocs = ['01', '02', '04', '08', '16']
sws = ['basicmath', 'dijkstra', 'fft', 'lu', 'ocean', 'sha', 
       'stringsearch', 'susancorners', 'susanedges', 'susansmoothing',
       'water', 'water-spatial']
# optional args
opts = {'-nb':'--nobuild', '-pw':'--power'}
# there must be exactly one arg of the below, and they're mutex
cmds = {'-r':'--run', '-b':'--build'}
# there must always be those 3 args
args = {'-p':'--processor', '-n':'--numcores', '-s':'--software', '-c':'--condor'}
# other args, also optional, but they come alone
xtrs = {'-l':'--clean', '-h':'--help'}

# === MAGIC ===

# gets the command line args
cmdline = sys.argv[1:]
a = []
# controlled by --run/--build, False if --run, True if --build
prep = False
nobuild = False
# controlled by -pw/--power
power = False
# controlled by -c/--condor
condor = 1

# TODO: TEST \/

# almost nailed the armored arg passing
if len(cmdline) == 1:
    if cmdline[0] not in xtrs.keys() and cmdline[0] not in xtrs.values():
        help()
        sys.exit(1)
    else:
        if cmdline[0] == '-h' or cmdline[0] == '--help':
            help()
            sys.exit(0)
        else:
            clean()
            sys.exit(0)

elif len(cmdline) == 4:
    # parsing in order to ensure that there are exclusively cmds and args
    for i in cmdline:
        s = i.split('=')
        if len(s) == 1:
            if s[0] not in cmds.keys() and s[0] not in cmds.values():
                help()
                sys.exit(1)
        elif len(s) == 2:
            if s[0] not in args.keys() and s[0] not in args.values():
                help()
                sys.exit(1)
        else:
            help()
            sys.exit(1)
    # now we are sure that there are only cmds and args
    # tests for build and run together
    if ('-r' in cmdline and '-b' in cmdline) or ('-r' in cmdline and '--build'\
       in cmdline) or ('--run' in cmdline and '--build' in cmdline) or \
       ('--run' in cmdline and '-b' in cmdline):
        help()
        sys.exit(1)
    if '-b' in cmdline or '--build' in cmdline:
        prep = True
    for i in cmdline:
        s = i.split('=')
        if s[0] == '-p' or s[0] == '--processor':
            proc = s[1]
        elif s[0] == '-n' or s[0] == '--numcores':
            nproc = s[1]
        elif s[0] == '-s' or s[0] == '--software':
            sw = s[1]
            
elif len(cmdline) == 5:
    # parsing in order to ensure that there are exclusively opts, cmds and args
    for i in cmdline:
        s = i.split('=')
        if len(s) == 1:
            if s[0] not in cmds.keys() and s[0] not in cmds.values() \
               and s[0] not in opts.keys() and s[0] not in opts.values():
                help()
                sys.exit(1)
        elif len(s) == 2:
            if s[0] not in args.keys() and s[0] not in args.values():
                help()
                sys.exit(1)
        else:
            help()
            sys.exit(1)
    
    # now we are sure that there are only opts, cmds and args
    # tests for build and run together
    if ('-r' in cmdline and '-b' in cmdline) or ('-r' in cmdline and '--build'\
       in cmdline) or ('--run' in cmdline and '--build' in cmdline) or \
       ('--run' in cmdline and '-b' in cmdline) :
        help()
        sys.exit(1)
    # tests for build and nobuild together
    if ('-nb' in cmdline and '-b' in cmdline) or ('-nb' in cmdline and '--build'\
       in cmdline) or ('--nobuild' in cmdline and '--build' in cmdline) or \
       ('--nobuild' in cmdline and '-b' in cmdline) :
        help()
        sys.exit(1)
    # tests for power and nobuild together
    if ('-pw' in cmdline and '-nb' in cmdline) or ('-pw' in cmdline and '--nobuild'\
       in cmdline) or ('--power' in cmdline and '--nobuild' in cmdline) or \
       ('--power' in cmdline and '-nb' in cmdline) :
        help()
        sys.exit(1)
    # tests for condor and nobuild together
        
    # it is for sure a valid arg set            
    if '-b' in cmdline or '--build' in cmdline:
        prep = True
    if '-pw' in cmdline or '--power' in cmdline:
        power = True
    if '-nb' in cmdline or '--nobuild' in cmdline:
        nobuild = True
    for i in cmdline:
        s = i.split('=')
        if s[0] == '-p' or s[0] == '--processor':
            proc = s[1]
        elif s[0] == '-n' or s[0] == '--numcores':
            nproc = s[1]
        elif s[0] == '-s' or s[0] == '--software':
            sw = s[1]
        elif s[0] == '-c' or s[0] == '--condor':
            if not nobuild:
                condor = s[1]
            else:
                help()
                sys.exit(1)
                
elif len(cmdline) == 6:
    
    # parsing in order to ensure that there are exclusively opts, cmds and args
    for i in cmdline:
        s = i.split('=')
        if len(s) == 1:
            if s[0] not in cmds.keys() and s[0] not in cmds.values() \
               and s[0] not in opts.keys() and s[0] not in opts.values():
                help()
                sys.exit(1)
        elif len(s) == 2:
            if s[0] not in args.keys() and s[0] not in args.values():
                help()
                sys.exit(1)
        else:
            help()
            sys.exit(1)
    
    # now we are sure that there are only opts, cmds and args
    # tests for build and run together
    if ('-r' in cmdline and '-b' in cmdline) or ('-r' in cmdline and '--build'\
       in cmdline) or ('--run' in cmdline and '--build' in cmdline) or \
       ('--run' in cmdline and '-b' in cmdline) :
        help()
        sys.exit(1)
    # tests for build and nobuild together
    if ('-nb' in cmdline and '-b' in cmdline) or ('-nb' in cmdline and '--build'\
       in cmdline) or ('--nobuild' in cmdline and '--build' in cmdline) or \
       ('--nobuild' in cmdline and '-b' in cmdline) :
        help()
        sys.exit(1)
    # tests for power and nobuild together
    if ('-pw' in cmdline and '-nb' in cmdline) or ('-pw' in cmdline and '--nobuild'\
       in cmdline) or ('--power' in cmdline and '--nobuild' in cmdline) or \
       ('--power' in cmdline and '-nb' in cmdline) :
        help()
        sys.exit(1)
    # it is for sure a valid arg set            
    if '-b' in cmdline or '--build' in cmdline:
        prep = True
    if '-pw' in cmdline or '--power' in cmdline:
        power = True
    if '-nb' in cmdline or '--nobuild' in cmdline:
        nobuild = True
    for i in cmdline:
        s = i.split('=')
        if s[0] == '-p' or s[0] == '--processor':
            proc = s[1]
        elif s[0] == '-n' or s[0] == '--numcores':
            nproc = s[1]
        elif s[0] == '-s' or s[0] == '--software':
            sw = s[1]
        elif s[0] == '-c' or s[0] == '--condor':
            if not nobuild:
                condor = s[1]
            else:
                help()
                sys.exit(1)

else:
    help()
    sys.exit(1)

# test for invalid args
if (proc not in procs and proc != "all") or \
   (nproc not in nprocs and nproc != "all") or (sw not in sws and sw != "all"):
    print "Error: invalid argument. Exiting..."
    sys.exit(1)

try:
    condor = int(condor)
    if condor < 1:
        condor = 1
except:
    print "Error: invalid argument. Exiting..."
    sys.exit(1)
    

# platform make tracker tree creation
tracker = []
if proc == "all":
    tracker.append(procs)
else:
    tracker.append([proc])
if nproc == "all":
    tracker.append(nprocs)
else:
    tracker.append([nproc])
if sw == "all":
    tracker.append(sws)
else:
    tracker.append([sw])

rundir_path = ""

if prep:
    build(tracker, power, condor)
else:
    run(tracker, nobuild, power, condor)

